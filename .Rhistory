}
darken_none
is.null(darken)
darken <- NULL
if (is.null(darken)) {
darken_none <- T
}
# make plots
p <- list()
makeLabel <- TRUE # add X axis label to last plot only
heights <- unlist(lapply(freq, function(x) length(x)))
for(len in maxLen:1){
if (darken_none == T) {
darken <- rep(FALSE, times=nrow(p_data_freq[[len]]))
} else {
# to add code
}
if ( !is.null(rules[[len]]) ){
p_freq <- ggplot2::ggplot(p_data_freq[[len]])+
ggplot2::geom_bar(ggplot2::aes(x=reorder(rules, freq), y=freq), stat="identity", width=.7, alpha=ifelse(darken, yes=1, no=.5))+
ggplot2::lims(y=c(maxFreq, 0))+
ggplot2::coord_flip()+
ggplot2::theme_bw()+
ggplot2::xlab(paste0("Length ", len))+
ggplot2::theme(axis.text.y=ggplot2::element_text(size=rule_text_size))+
ggplot2::scale_fill_grey()
p_stats <- ggplot2::ggplot(p_data_stats[[len]])+
# tp
ggplot2::geom_bar(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), y=median), stat="identity", width=.7, alpha=ifelse(darken, yes=1, no=.5))+
ggplot2::geom_errorbar(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), min=min, max=max), width=.5, alpha=ifelse(darken, yes=1, no=.7), size=.5)+
# fp
ggpattern::geom_bar_pattern(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), y=-fp[[len]]$median),
stat="identity",
width=.7,
fill = 'white',
colour = ifelse(darken, yes=neg_color, no=prettyGraphs::add.alpha(neg_color, alpha=neg_alpha)),
pattern_color = neg_color,
pattern_alpha = ifelse(darken, yes=1, no=neg_alpha),
pattern_fill = neg_color,
pattern = 'stripe',
pattern_density = .5,
pattern_spacing = 0.1) +
ggplot2::geom_errorbar(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), min=-fp[[len]]$min, max=-fp[[len]]$max), color=neg_color, width=.5, alpha=ifelse(darken, yes=1, no=.7), size=.5)+
ggplot2::coord_flip()+
ggplot2::theme_bw()+
ggplot2::lims(y=c(minStat,maxStat))+
ggplot2::scale_fill_grey()
# add X-label if last plot; otherwise, make blank
if(makeLabel){
p_freq <- p_freq+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.text.x=ggplot2::element_text(size=number_size))+
ggplot2::ylab("Prevalence")
p_stats <- p_stats+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())+
ggplot2::ylab("Coverage")
heights[len] <- heights[len] + heightBuffer # account for the x-axis labels
makeLabel <- FALSE
} else {
p_freq <- p_freq+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.title.x=ggplot2::element_blank(),
axis.text.x=ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank())
p_stats <- p_stats+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.title.x=ggplot2::element_blank(),
axis.text.x=ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
}
p[[len]] <- cbind(ggplot2::ggplotGrob(p_freq), ggplot2::ggplotGrob(p_stats))
}
}
heights <- (heights+plotBuffer)/sum(heights)
p
cowplot::plot_grid(plotlist=p,align = "v", nrow = maxLen, rel_heights = heights)
p
plot(p)
print(p)
plot(p[[1]])
plot(p[[2]])
plot(p[[3]])
plot(p[[3]])
len <- 3
ggplot2::ggplot(p_data_freq[[len]])+
ggplot2::geom_bar(ggplot2::aes(x=reorder(rules, freq), y=freq), stat="identity", width=.7, alpha=ifelse(darken, yes=1, no=.5))+
ggplot2::lims(y=c(maxFreq, 0))+
ggplot2::coord_flip()+
ggplot2::theme_bw()+
ggplot2::xlab(paste0("Length ", len))+
ggplot2::theme(axis.text.y=ggplot2::element_text(size=rule_text_size))+
ggplot2::scale_fill_grey()
if (darken_none == T) {
darken <- rep(FALSE, times=nrow(p_data_freq[[len]]))
} else {
# to add code
}
ggplot2::ggplot(p_data_freq[[len]])+
ggplot2::geom_bar(ggplot2::aes(x=reorder(rules, freq), y=freq), stat="identity", width=.7, alpha=ifelse(darken, yes=1, no=.5))+
ggplot2::lims(y=c(maxFreq, 0))+
ggplot2::coord_flip()+
ggplot2::theme_bw()+
ggplot2::xlab(paste0("Length ", len))+
ggplot2::theme(axis.text.y=ggplot2::element_text(size=rule_text_size))+
ggplot2::scale_fill_grey()
p_freq <- ggplot2::ggplot(p_data_freq[[len]])+
ggplot2::geom_bar(ggplot2::aes(x=reorder(rules, freq), y=freq), stat="identity", width=.7, alpha=ifelse(darken, yes=1, no=.5))+
ggplot2::lims(y=c(maxFreq, 0))+
ggplot2::coord_flip()+
ggplot2::theme_bw()+
ggplot2::xlab(paste0("Length ", len))+
ggplot2::theme(axis.text.y=ggplot2::element_text(size=rule_text_size))+
ggplot2::scale_fill_grey()
p_freq+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.text.x=ggplot2::element_text(size=number_size))+
ggplot2::ylab("Prevalence")
p_freq <- p_freq+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.text.x=ggplot2::element_text(size=number_size))+
ggplot2::ylab("Prevalence")
p
p[[3]]
p_stats <- ggplot2::ggplot(p_data_stats[[len]])+
# tp
ggplot2::geom_bar(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), y=median), stat="identity", width=.7, alpha=ifelse(darken, yes=1, no=.5))+
ggplot2::geom_errorbar(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), min=min, max=max), width=.5, alpha=ifelse(darken, yes=1, no=.7), size=.5)+
# fp
ggpattern::geom_bar_pattern(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), y=-fp[[len]]$median),
stat="identity",
width=.7,
fill = 'white',
colour = ifelse(darken, yes=neg_color, no=prettyGraphs::add.alpha(neg_color, alpha=neg_alpha)),
pattern_color = neg_color,
pattern_alpha = ifelse(darken, yes=1, no=neg_alpha),
pattern_fill = neg_color,
pattern = 'stripe',
pattern_density = .5,
pattern_spacing = 0.1) +
ggplot2::geom_errorbar(ggplot2::aes(x=reorder(rules, p_data_freq[[len]]$freq), min=-fp[[len]]$min, max=-fp[[len]]$max), color=neg_color, width=.5, alpha=ifelse(darken, yes=1, no=.7), size=.5)+
ggplot2::coord_flip()+
ggplot2::theme_bw()+
ggplot2::lims(y=c(minStat,maxStat))+
ggplot2::scale_fill_grey()
p_stats+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())+
ggplot2::ylab("Coverage")
p_stats <- p_stats+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())+
ggplot2::ylab("Coverage")
heights[len] <- heights[len] + heightBuffer # account for the x-axis labels
heights
p
ggplot2::ggplotGrob(p_freq)
ggplot2::ggplotGrob(p_stats)
plot(ggplot2::ggplotGrob(p_freq))
plot(ggplot2::ggplotGrob(p_stat))
plot(ggplot2::ggplotGrob(p_stats))
print(lipset_bar)
lipset_bar <- brs::plot_bar(df = lipset_df, Y=lipset_Y, fit = out_lipset, featureLabels = fdf,
maxLen=3, minProp = .05, topRules=5,
simplify = T, oppmat=oppmat, oppind=oppind, and =" & ",
plotBuffer = c(.25, 0, .4), boot_rep = 10L,
titleSize=19, rule_text_size = 18, number_size = 18)
print(lipset_bar)
lipset_bar <- brs::plot_bar(df = lipset_df, Y=lipset_Y, fit = out_lipset, featureLabels = fdf,
maxLen=3, minProp = .05, topRules=5,
simplify = T, oppmat=oppmat, oppind=oppind, and =" & ",
plotBuffer = c(.25, 0, .4), boot_rep = 10L,
titleSize=19, rule_text_size = 18, number_size = 18)
print(lipset_bar)
ggplot2::ggplot(p_data_freq[[len]])+
ggplot2::geom_bar(ggplot2::aes(x=reorder(rules, freq), y=freq), stat="identity", width=.7, alpha=ifelse(darken, yes=1, no=.5))+
ggplot2::lims(y=c(maxFreq, 0))+
ggplot2::coord_flip()+
ggplot2::theme_bw()+
ggplot2::xlab(paste0("Length ", len))+
ggplot2::theme(axis.text.y=ggplot2::element_text(size=rule_text_size))+
ggplot2::scale_fill_grey()
cowplot::plot_grid(plotlist=p,align = "v", nrow = maxLen, rel_heights = heights)
cowplot::plot_grid(plotlist=p,align = "v", nrow = maxLen, rel_heights = heights)
cowplot::plot_grid(plotlist=p[[3]],align = "v", nrow = maxLen, rel_heights = heights)
plot(p[[3]])
p
p_stats+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())+
ggplot2::ylab("Coverage")
p_freq+
ggplot2::theme(text=ggplot2::element_text(size=titleSize),
axis.text.x=ggplot2::element_text(size=number_size))+
ggplot2::ylab("Prevalence")
cbind(ggplot2::ggplotGrob(p_freq), ggplot2::ggplotGrob(p_stats))
plot(cbind(ggplot2::ggplotGrob(p_freq), ggplot2::ggplotGrob(p_stats)))
print(lipset_bar)
devtools::build_vignettes(pkg="brs")
devtools::build_vignettes(pkg="brs", manual=T)
devtools::build_rmd("vignettes/my-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
lipset_bar <- brs::plot_bar(df = lipset_df, Y=lipset_Y, fit = out_lipset, featureLabels = fdf,
maxLen=3, minProp = .05, topRules=5,
simplify = T, oppmat=oppmat, oppind=oppind, and =" & ",
plotBuffer = c(.25, 0, .4), boot_rep = 10L,
titleSize=12, rule_text_size = 10, number_size = 10)
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
# install python and packages to environment
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
# install python and packages to environment
#reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="BRS_conda")  ## use this conda environment for BRS
reticulate::conda_remove(envname="BRS_conda")
# install python and packages to environment
#reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="BRS_conda")  ## use this conda environment for BRS
library(brs)
set.seed(123)
# load data for example
data("lipset_df", "lipset_Y")
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
reticulate::conda_remove(envname="BRS_conda")
reticulate::conda_remove(envname="BRS_conda")
reticulate::conda_remove(envname="BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=10L)
reticulate::use_condaenv(condaenv="BRS_conda")  ## use this conda environment for BRS
reticulate::use_condaenv(condaenv="BRS_conda3")  ## use this conda environment for BRS
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=10L)
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda4")
reticulate::use_condaenv(condaenv="BRS_conda4")  ## use this conda environment for BRS
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda4")
reticulate::conda_install(envname = "BRS_conda4",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="BRS_conda4")  ## use this conda environment for BRS
reticulate::use_condaenv(condaenv="BRS_conda3")  ## use this conda environment for BRS
reticulate::use_condaenv(condaenv="BRS_conda4")  ## use this conda environment for BRS
# load brs
library(brs)
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=2L)
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
reticulate::conda_remove("BRS_conda")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
# First create conda environment
# do this *before* loading the brs package. If you've already loaded brs or
#   have been using reticulate, you may need to restart R and rerun your code
#   in the order shown below
# Note: this code is for computers with Apple silicon (M1, etc.)
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
tryCatch(reticulate::conda_remove(envname = "BRS_conda"))
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")} )
# for recompiling the vignette without errors (env already exists)
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")} {})
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")}, {})
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")}, {return})
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")}, {return()})
# for recompiling the vignette without errors (env already exists)
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")}, finally={})
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")}, error={}, finally={})
# for recompiling the vignette without errors (env already exists)
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")}, error=function(cond){}, finally={})
devtools::build_rmd("vignettes/brs-vignette.Rmd")
# for recompiling the vignette without errors (env already exists)
tryCatch( {reticulate::conda_remove(envname = "BRS_conda")},
error=function(er){}, finally={})
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
# for recompiling the vignette without errors (env already exists)
tryCatch( {reticulate::conda_remove(envname = "/Users/albertchiu/miniforge3/envs/BRS_conda")},
error=function(er){}, finally={})
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_remove(envname = "BRS_conda"
reticulate::conda_remove(envname = "BRS_conda")
reticulate::conda_remove(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::conda_remove(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="BRS_conda")  ## use this conda environment for BRS
# install and load
# # uncomment if you haven't already installed the package
library(brs)
devtools::build_rmd("vignettes/my-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
list.files("~/miniforge3/envs")
file.remove(list.files("~/miniforge3/envs"))
do.call(file.remove, list(list.files("~/miniforge3/envs")))
do.call(file.remove, list(list.files("~/miniforge3/envs", full.names = T)))
reticulate::conda_remove(envname = "BRS_conda")
do.call(unlink, list(list.files("~/miniforge3/envs", full.names = T)))
?do.call
devtools::build_rmd("vignettes/brs-vignette.Rmd")
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="BRS_conda")  ## use this conda environment for BRS
# install python and packages to environment
reticulate::conda_create(envname = "BRS_conda")
# install python and packages to environment
reticulate::conda_create(envname = "~/miniforge3/BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
# install python and packages to environment
reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
reticulate::conda_install(envname = "BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")  ## use this conda environment for BRS
devtools::build_rmd("vignettes/brs-vignette.Rmd")
# First create conda environment
# do this *before* loading the brs package. If you've already loaded brs or
#   have been using reticulate, you may need to restart R and rerun your code
#   in the order shown below
# Note: this code is for computers with Apple silicon (M1, etc.)
# install python and packages to environment
reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
matrix(c(0,1), ncol=2)
oppind
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
# install python and packages to environment
reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
# install python and packages to environment
reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
# install and load
# # uncomment if you haven't already installed the package
library(brs)
set.seed(123)
# load data for example
data("lipset_df", "lipset_Y")
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
# install and load
# # uncomment if you haven't already installed the package
library(brs)
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")
# install and load
# # uncomment if you haven't already installed the package
library(brs)
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
# install python and packages to environment
reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")
# for recompiling the vignette without errors (env already exists)
#tryCatch( {reticulate::conda_remove(envname = "BRS_conda")},
#          error=function(er){}, finally={})
#do.call(file.remove, list(list.files("~/miniforge3/envs", full.names = T)))
#do.call(unlink(x, recursive=T), function(x) list(list.files("~/miniforge3/envs", full.names = T)))
unlink("~/miniforge3/envs/BRS_conda", recursive = T)
# install python and packages to environment
reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")
# First create conda environment
# do this *before* loading the brs package. If you've already loaded brs or
#   have been using reticulate, you may need to restart R and rerun your code
#   in the order shown below
# Note: this code is for computers with Apple silicon (M1, etc.)
# install python and packages to environment
#reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
unlink("~/miniforge3/envs/BRS_conda", recursive = T)
# install python and packages to environment
#reticulate::conda_create(envname = "~/miniforge3/envs/BRS_conda")
reticulate::conda_install(envname = "~/miniforge3/envs/BRS_conda",
conda="~/miniforge3/condabin/conda",  # path to conda binary
packages = c("numpy", "pandas", "scikit-learn", "scipy"))
reticulate::use_condaenv(condaenv="~/miniforge3/envs/BRS_conda")
# install and load
# # uncomment if you haven't already installed the package
library(brs)
set.seed(123)
# load data for example
data("lipset_df", "lipset_Y")
# run BRS with default parameters
out_lipset <- brs::BRS(df = lipset_df, Y = lipset_Y, seed = 123,
maxLen=3L, bootstrap = T, reps=100L)
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd")
varnames(lipset_df)
varnames(lipset_df)
names(lipset_df)
rbind(c("low", "high"),
c("low", "medhigh"),
c("high", "lowmed"))
list(c("polint"),
feats[c(6:10, 12:14)],
feats[c(6:10, 12:14)])
devtools::build_rmd("vignettes/brs-vignette.Rmd")
devtools::build_rmd("vignettes/brs-vignette.Rmd", path="../")
vignette(brs)
vignette("brs")
vignette(package="brs")
devtools::build()
